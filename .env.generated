# Auto-generated by create_env_from_json.sh on Fri Jun 20 18:04:59 PDT 2025
# Content of: ai_maturity_quick_check

VITE_QUIZ_JSON_CONTENT={
  "app_config": {
    "title": "AI Maturity Checkup",
    "subtitle": "Answer these 5 questions to receive a custom report diagnosing your AI readiness. Pinpoint your risks and opportunities to build a high-impact roadmap for growth.",
    "logo_image_url": "https://raw.githubusercontent.com/FireMountainLabs/ai-maturity-model/main/public/fml.png",
    "footer_copyright": "© 2025 Fire Mountain Labs. AI Maturity Snapshot.",
    "footer_tagline": "Humans that know AI."
  },
  "sections": {
    "quiz": {
      "description": "It only takes a few moments to complete."
    },
    "snapshot": {
      "title": "AI MATURITY SNAPSHOT",
      "subtitle": "Your Organization's AI Readiness Profile",
      "pillars_title": "AI Maturity Model Scoring",
      "recommendations_title": "💡 Key Recommendations"
    },
    "contact": {
      "title": "📧 Get Your Detailed Assessment",
      "description": "Ready to dive deeper? Our AI experts will provide a comprehensive analysis and personalized roadmap.",
      "fields": {
        "name": {
          "label": "Full Name *",
          "type": "text",
          "required": true
        },
        "email": {
          "label": "Email Address *",
          "type": "email",
          "required": true
        },
        "company": {
          "label": "Company *",
          "type": "text",
          "required": true
        },
        "title": {
          "label": "Job Title",
          "type": "text",
          "required": false
        },
        "phone": {
          "label": "Phone Number",
          "type": "tel",
          "required": false
        },
        "message": {
          "label": "Additional Notes",
          "type": "textarea",
          "placeholder": "Tell us about your AI goals or challenges...",
          "required": false
        }
      }
    },
    "success": {
      "title": "Assessment Request Sent!",
      "description": "Thank you for your interest! Our AI experts will review your snapshot and contact you within 24 hours with a detailed analysis and personalized recommendations.",
      "icon": "✅"
    }
  },
  "buttons": {
    "generate_snapshot": {
      "text": "🎴 Generate Snapshot",
      "type": "primary"
    },
    "submit_contact": {
      "text": "📧 Submit & Contact Us",
      "type": "secondary"
    },
    "back_to_quiz": {
      "text": "← Back to Quiz",
      "type": "outline"
    },
    "back_to_snapshot": {
      "text": "← Back to Snapshot",
      "type": "outline"
    },
    "download_snapshot": {
      "text": "Book a Free Consult",
      "type": "primary"
    },
    "start_over": {
      "text": "🔄 Start New Assessment",
      "type": "primary"
    },
    "send_request": {
      "text": "🚀 Send Assessment Request",
      "type": "primary"
    }
  },
  "pillars": {
    "ethical_use": {
      "name": "Ethical, Equitable, & Responsible",
      "icon": "public/icons/ethical.svg"
    },
    "strategy_resources": {
      "name": "Strategy & Resources",
      "icon": "public/icons/strategy.svg"
    },
    "organization": {
      "name": "Organization",
      "icon": "public/icons/organization.svg"
    },
    "data_analytics": {
      "name": "Data & Analytics",
      "icon": "public/icons/data.svg"
    },
    "tech_infra": {
      "name": "Technology Infrastructure",
      "icon": "public/icons/technology.svg"
    },
    "risk_monitoring": {
      "name": "Risk Management & Monitoring",
      "icon": "public/icons/performance.svg"
    }
  },
  "description": "A rapid assessment tool to evaluate AI maturity across key organizational dimensions. This quick check provides immediate insights into your organization's AI readiness and highlights areas of uncertainty that may require deeper assessment.",
  "instructions": "For each question, select the answer that best describes your organization's current state. Each answer provides insights into your maturity level and potential areas for improvement.",
  "scoring_guide": {
    "Yes": {
      "description": "High Maturity",
      "score": 4.5,
      "interpretation": "Strong foundation in this area"
    },
    "Partially": {
      "description": "Mid Maturity", 
      "score": 2.5,
      "interpretation": "Some progress but room for improvement"
    },
    "No": {
      "description": "Low Maturity",
      "score": 1,
      "interpretation": "Significant work needed in this area"
    },
    "I Don't Know": {
      "description": "High Uncertainty",
      "score": 1.5,
      "interpretation": "Red flag - requires deeper assessment or expert help"
    }
  },
  "questions": [
    {
      "id": 1,
      "category": "Ethical Governance & Accountability",
      "question": "Do you have clear rules and checks to control how AI is used and to handle unexpected problems?",
      "pillars_covered": ["ethical_use"],
      "choices": {
        "Yes": {
          "text": "Yes",
          "score": 4.5,
          "description": "You have well-defined governance, enforced rules, and regular reviews for AI impacts."
        },
        "Partially": {
          "text": "Partially",
          "score": 2.5,
          "description": "Some rules or reviews exist, but they're incomplete or not always enforced."
        },
        "No": {
          "text": "No",
          "score": 1,
          "description": "There's no clear process to manage AI use or review consequences."
        },
        "I Don't Know": {
          "text": "I Don't Know",
          "score": 1.5,
          "description": "You're not sure if there's a process or how strong it is."
        }
      }
    },
    {
      "id": 2,
      "category": "Strategic Clarity & Leadership Commitment",
      "question": "Does your organization have a clear AI plan, a set budget, and visible leadership support to drive adoption?",
      "pillars_covered": ["strategy_resources"],
      "choices": {
        "Yes": {
          "text": "Yes",
          "score": 4.5,
          "description": "You have a clear AI strategy, dedicated budget, and active leadership backing."
        },
        "Partially": {
          "text": "Partially",
          "score": 2.5,
          "description": "Some pieces are in place, but commitment or funding is not consistent."
        },
        "No": {
          "text": "No",
          "score": 1,
          "description": "No clear AI strategy, budget, or visible leadership support."
        },
        "I Don't Know": {
          "text": "I Don't Know",
          "score": 1.5,
          "description": "Not sure about the AI plan, budget, or level of leadership support."
        }
      }
    },
    {
      "id": 3,
      "category": "Workforce Readiness & Culture",
      "question": "Is your team trained, assigned clear roles, and supported by a culture that helps them use AI safely and confidently?",
      "pillars_covered": ["organization"],
      "choices": {
        "Yes": {
          "text": "Yes",
          "score": 4.5,
          "description": "Your workforce is well-trained, roles are clear, and the culture supports safe AI use."
        },
        "Partially": {
          "text": "Partially",
          "score": 2.5,
          "description": "Some training and role clarity exist, but gaps remain or culture needs work."
        },
        "No": {
          "text": "No",
          "score": 1,
          "description": "Team lacks enough training, clear roles, or supportive culture for AI."
        },
        "I Don't Know": {
          "text": "I Don't Know",
          "score": 1.5,
          "description": "Not sure how ready or supported your workforce is for AI."
        }
      }
    },
    {
      "id": 4,
      "category": "Technology & Data Foundations",
      "question": "Do you already have the basic tools, safeguards, and data rules needed to run AI safely?",
      "pillars_covered": ["tech_infra", "data_analytics"],
      "choices": {
        "Yes": {
          "text": "Yes",
          "score": 4.5,
          "description": "You have reliable infrastructure, clear security/testing routines, and documented data-governance rules."
        },
        "Partially": {
          "text": "Partially",
          "score": 2.5,
          "description": "Some of those pieces exist, but a few still need work or formalization."
        },
        "No": {
          "text": "No",
          "score": 1,
          "description": "You're missing most of the infrastructure, security/testing, or data-governance basics."
        },
        "I Don't Know": {
          "text": "I Don't Know",
          "score": 1.5,
          "description": "You're unsure how complete or effective your current foundations are."
        }
      }
    },
    {
      "id": 5,
      "category": "Business Value & Oversight",
      "question": "Do you have a way to measure, track, and keep improving how well AI performs, delivers ROI, and stays trustworthy?",
      "pillars_covered": ["risk_monitoring"],
      "choices": {
        "Yes": {
          "text": "Yes",
          "score": 4.5,
          "description": "You have clear processes to measure performance, ROI, and trust, and you review them regularly."
        },
        "Partially": {
          "text": "Partially",
          "score": 2.5,
          "description": "Some measurement and oversight exist, but they're limited or not consistent."
        },
        "No": {
          "text": "No",
          "score": 1,
          "description": "No clear way to measure AI performance, ROI, or trustworthiness."
        },
        "I Don't Know": {
          "text": "I Don't Know",
          "score": 1.5,
          "description": "Not sure if there's a way to measure or improve AI performance and trust."
        }
      }
    }
  ],
  "interpretation_guide": {
    "total_score_ranges": {
      "18-22.5": {
        "level": "Level 4: Managed",
        "description": "Strong AI foundation across all key areas. Focus on optimization and advanced capabilities.",
        "recommendations": [
          "Continue optimizing existing processes",
          "Explore advanced AI capabilities",
          "Share best practices with industry peers"
        ]
      },
      "12.5-17.5": {
        "level": "Level 3: Developing", 
        "description": "Good progress in most areas with some opportunities for improvement.",
        "recommendations": [
          "Strengthen areas with lower scores",
          "Standardize processes across the organization",
          "Increase leadership visibility and commitment"
        ]
      },
      "7.5-12": {
        "level": "Level 2: Engaged",
        "description": "Moderate AI readiness with significant areas needing attention.",
        "recommendations": [
          "Prioritize foundational improvements",
          "Develop comprehensive AI strategy",
          "Invest in workforce training and culture change"
        ]
      },
      "5-7": {
        "level": "Level 1: Initial",
        "description": "Limited AI readiness requiring foundational work across multiple areas.",
        "recommendations": [
          "Start with basic AI governance and strategy",
          "Build foundational technology and data capabilities",
          "Consider external expertise and guidance"
        ]
      }
    },
    "uncertainty_guidance": {
      "description": "Any 'I Don't Know' responses indicate high uncertainty and should be addressed as priority areas.",
      "recommendations": [
        "Conduct deeper assessment in uncertain areas",
        "Engage subject matter experts for evaluation",
        "Develop clear understanding before proceeding with AI initiatives"
      ]
    }
  },
  "usage_notes": {
    "scoring": "Each 'Yes' ≈ Level 4 (4.5), 'Partially' ≈ Level 3 (2.5), 'No' ≈ Level 1 (1.0), 'I Don't Know' ≈ Level 1.5 (1.5)",
    "uncertainty": "'I Don't Know' highlights uncertainty — a red flag for deeper assessment or expert help",
    "next_steps": "Use results to identify priority areas for improvement and determine if detailed assessment is needed"
  }
} 
